apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todo-api
  template:
    metadata:
      labels:
        app: todo-api
    spec:
      containers:
      - name: api
        image: node:16-alpine
        command: ["sh", "-c"]
        args:
        - |
          npm init -y
          npm install express pg
          cat > server.js << 'EOF'
          const express = require('express');
          const { Client } = require('pg');
          const app = express();
          
          app.use(express.json());
          
          const client = new Client({
            host: 'todo-db',
            database: 'todoapp',
            user: 'todouser',
            password: 'todopass',
            port: 5432,
          });
          
          client.connect();
          
          // Create table
          client.query(`
            CREATE TABLE IF NOT EXISTS todos (
              id SERIAL PRIMARY KEY,
              text TEXT NOT NULL,
              completed BOOLEAN DEFAULT FALSE
            )
          `);
          
          app.get('/api/todos', async (req, res) => {
            const result = await client.query('SELECT * FROM todos');
            res.json(result.rows);
          });
          
          app.post('/api/todos', async (req, res) => {
            const { text } = req.body;
            const result = await client.query('INSERT INTO todos (text) VALUES ($1) RETURNING *', [text]);
            res.json(result.rows[0]);
          });
          
          app.listen(3000, () => console.log('API running on port 3000'));
          EOF
          node server.js
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: todo-api
spec:
  selector:
    app: todo-api
  ports:
  - port: 3000
    targetPort: 3000
